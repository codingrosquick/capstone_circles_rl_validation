
TODOLIST -> SERVER FLASK


    0 - SETUP SIMPLE SERVER

######### - Installation
######### - Add routes template to call python scripts
-> start with the file exploration functionnalities
    ####### - take arguments from POST request with Flask
    ####### - find a way to handle the async issue ??? resolve the installation issue

    - redo the gitignore!
    - place all of this in a new github repository!
    
    - debug iput command!
    
    - init local cache at the end of creation
    - afterwards, extends this into routes (the index file), controllers and services
    - add possibility to delete such runs (careful)

===================== TONIGHT =====================



- Add the common utilities for DL, exploration,
    Caching (several places and cleans for those), add some logging
    + files architecture 


    1 - First functionnalities

- Add the file explorer (turn into simple python script)
- define all of the routes to build and put in a doc -> send to Jessica
- Call ipynb from python? (for analysis of events)


    2 - SETUP ADDITIONNAL TECH FEATURES

- JWT
- ###DONE### Async workers
    - separate async workers out of the loop?
- Some unit / integration testing
- Global Variables handling


    3 - ADD CONTENT & Metrics

- Metrics 1 file
- Aggregated Metrics
- More driving situations?


    4 - DEPLOY & simulation

- Docker image
- Call to launch the simulation (Jessica)

- Looping over the whole process

- Think about how to make it more flexible and customizable






NB: ITERATOR files
- see with jonathan -> make sth like a python package available on pip! YES
- clean the file handler class to use in this package
- also allow to filter on the root for the analysis
- add examples of usage
- allow for searching libpanda, dashcam, or bagfiles (let the user select) (test for directories)



Some idea from meeting: https://docs.google.com/presentation/d/1FDeIyACGD39hI5YSNGGzlR1x5bKUus1rT0kJQhyN810/edit#slide=id.g12405f45964_0_10
(cf last slide)


